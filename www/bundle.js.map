{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// import * as Tone from \"tone\";\n\n/*\nTODO\n\n- Clean up code\n- Add transport controls, play/stop toggle between playing and not playing, \n    with a start position variable.\n- Add synth that produces sound, like tone.js\n- Play notes when pressing keys on piano bar left of frame\n- Note creation, deletion, dragging across grid, etc.\n    - Double click to add notes\n    - Double click to delete\n    - Click and drag to change time/pitch\n    - Click and drag right side to change duration\n- Add note selection\n    - Shift click to add/remove note from selection\n    - Click and drag over backdrop to create selection box\n        - Create canvas layer in note grid, overlaying the notes\n        - On mousedown, store click coordinates in variable.\n        - On mousemove, draw selection rectangle between mouse's current coordinates and the starting coords.\n        - On mouseup, clear drawing and find the notes which trigger within that interval of time and pitch.\n- Add context menus\n- Autoscroll to new region when playhead reaches end of frame\n- Set playhead speed with respect to piano roll bpm\n- Left click empty note grid to move playhead to nearest quantized x position\n*/\nclass NoteSelection {\n    \n}\n\nclass SynthEngine {\n    // synth: Tone.Synth;\n\n    constructor() {\n        // this.synth = new Tone.Synth().toDestination();\n        this.playNote(60);\n    }\n\n    playNote(pitch: number) {\n        // this.synth.triggerAttackRelease(numToPitchName(pitch), \"8n\");\n    }\n}\n\nclass Note {\n    pitch: number;\n    time: number;\n    dur: number;\n\n    constructor(pitch: number, time: number, dur: number) {\n        this.pitch = pitch;\n        this.time = time;\n        this.dur = dur;\n    }\n}\n\nclass NoteGrid {\n    pianoRoll: PianoRoll;\n    frame: HTMLDivElement;\n    noteGrid: HTMLDivElement;\n    \n    constructor(pianoRoll: PianoRoll) {\n        this.pianoRoll = pianoRoll;\n        this.frame = document.createElement(\"div\");\n        this.noteGrid = document.createElement(\"div\");\n\n        this.#createFrame();\n        this.#drawBackdrop();\n        this.#drawNotes();\n    }\n\n    #createFrame() {\n        this.frame.id = \"note-grid-frame\"\n        this.frame.style.position = \"absolute\";\n        this.frame.style.top = this.pianoRoll.config.timeBarHeight + \"px\";\n        this.frame.style.left = this.pianoRoll.config.pianoBarWidth + \"px\";\n        this.frame.style.width = this.pianoRoll.config.frameWidth + \"px\";\n        this.frame.style.height = this.pianoRoll.config.frameHeight + \"px\";\n        this.frame.style.overflow = \"scroll\"; \n        this.frame.style.scrollbarWidth = \"none\";\n        this.pianoRoll.frame.append(this.frame);\n    }\n\n    #drawBackdrop() {\n        var canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n        canvas.id = \"backdrop\";\n        canvas.style.position = \"absolute\";\n\n        canvas.height = this.pianoRoll.canvasHeight;\n        canvas.width = this.pianoRoll.canvasWidth;\n\n        const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\")!;\n        var colorOne = \"rgb(80,80,80)\";\n        var colorTwo = \"rgb(50,50,50)\";\n        var fillStyles = [colorOne, colorTwo, colorOne, colorTwo, colorOne, colorOne, colorTwo, colorOne, colorTwo, colorOne, colorTwo, colorOne];\n\n        // Pitch lanes\n        ctx.strokeStyle = \"rgb(60,60,60)\";\n        ctx.lineWidth = 1;\n        \n        // These two for loops iterate through the pitches present in the piano roll, from high to low.\n        let j = 0;\n        for (let i=this.pianoRoll.maxDrawPitch; i>=this.pianoRoll.minDrawPitch; i--) { // Fill\n            ctx.fillStyle = fillStyles[i%12];\n            ctx.fillRect(0, this.pianoRoll.config.noteHeight * j, canvas.width, this.pianoRoll.config.noteHeight);\n            j++;\n        }\n        j=0;\n        for (let i=this.pianoRoll.maxDrawPitch; i>=this.pianoRoll.minDrawPitch; i--) { // Stroke\n            if (i%12 === 11) {\n                ctx.strokeStyle = \"rgb(20,20,20)\";\n            } else {\n                ctx.strokeStyle = colorTwo;\n            }\n            ctx.beginPath();\n            ctx.moveTo(0, j * this.pianoRoll.config.noteHeight);\n            ctx.lineTo(canvas.width, j * this.pianoRoll.config.noteHeight);\n            ctx.stroke();\n            j++;\n        }\n\n        // Time markers\n        for (let i=0; i<this.pianoRoll.beatDrawCount; i++) {\n            if (i%4 === 0) {\n                ctx.strokeStyle = \"rgb(20,20,20)\";\n            } else {\n                ctx.strokeStyle = \"rgb(40,40,40)\";\n            }\n            ctx.beginPath();\n            ctx.moveTo(i*this.pianoRoll.config.beatWidth, 0);\n            ctx.lineTo(i*this.pianoRoll.config.beatWidth, canvas.height);\n            ctx.stroke();\n        }\n\n        this.frame.append(canvas);\n    }\n\n    #drawNotes() {\n        // Note: you want to draw the earliest notes first, because when two notes overlap, the leftmost note should always be on top.\n        this.noteGrid.id = \"note-grid\";\n        this.noteGrid.style.position = \"absolute\";\n        this.frame.append(this.noteGrid);\n\n        if (!this.pianoRoll.noteSet) return;\n\n        for (let i=0; i<this.pianoRoll.noteSet.length; i++) {\n            let note: HTMLButtonElement = document.createElement(\"button\");\n            note.style.position = \"absolute\";\n            note.style.width = (this.pianoRoll.config.beatWidth * this.pianoRoll.noteSet[i].dur) + \"px\";\n            note.style.height = this.pianoRoll.config.noteHeight + \"px\";\n            note.style.left = (this.pianoRoll.config.beatWidth * this.pianoRoll.noteSet[i].time) + \"px\";\n            note.style.top = (this.pianoRoll.config.noteHeight * (this.pianoRoll.maxDrawPitch - this.pianoRoll.noteSet[i].pitch)) + \"px\";\n            note.innerHTML = this.pianoRoll.noteSet[i].pitch.toString();\n            note.style.textAlign = \"left\";\n            // note.style.verticalAlign = \"middle\";\n            note.style.padding = 0+\"px\";\n            note.style.fontSize = clamp(this.pianoRoll.config.noteHeight/1.5, 0, 10) + \"px\";\n            this.noteGrid.append(note);\n        }\n    }\n}\n\nclass PianoBar {\n    pianoRoll: PianoRoll;\n    frame: HTMLDivElement;\n    width: number = 30;\n\n    constructor(pianoRoll: PianoRoll) {\n        this.pianoRoll = pianoRoll;\n        this.frame = document.createElement(\"div\");\n\n        this.#createFrame();\n        this.#draw();\n    }\n\n    #createFrame() {\n        this.frame.id = \"piano-bar-frame\"\n        this.frame.style.position = \"absolute\";\n        this.frame.style.top = this.pianoRoll.config.timeBarHeight + \"px\";\n        this.frame.style.width = this.width + \"px\";\n        this.frame.style.height = this.pianoRoll.config.frameHeight + \"px\";\n        this.frame.style.overflow = \"scroll\";\n        this.frame.style.scrollbarWidth = \"none\";\n        this.pianoRoll.frame.append(this.frame);\n    }\n\n    #draw() {\n        var canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n        canvas.id = \"piano-bar\";\n        canvas.style.position = \"absolute\";\n\n        canvas.height = this.pianoRoll.canvasHeight;\n        canvas.width = this.width;\n\n        const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\")!;\n        var colorOne = \"white\";\n        var colorTwo = \"black\";\n        var fillStyles = [colorOne, colorTwo, colorOne, colorTwo, colorOne, colorOne, colorTwo, colorOne, colorTwo, colorOne, colorTwo, colorOne];\n\n        // Pitch lanes\n        ctx.strokeStyle = \"rgb(190,190,190)\";\n        ctx.lineWidth = 1;\n        \n        // These two for loops iterate through the pitches present in the piano roll, from high to low.\n        let j = 0;\n        for (let i=this.pianoRoll.maxDrawPitch; i>=this.pianoRoll.minDrawPitch; i--) { // Fill\n            ctx.fillStyle = fillStyles[i%12];\n            ctx.fillRect(0, this.pianoRoll.config.noteHeight * j, this.width, this.pianoRoll.config.noteHeight);\n            j++;\n        }\n        j=0;\n        for (let i=this.pianoRoll.maxDrawPitch; i>=this.pianoRoll.minDrawPitch; i--) { // Stroke\n            if (i%12 === 11) {\n                ctx.strokeStyle = \"rgb(20,20,20)\";\n            } else {\n                ctx.strokeStyle = colorTwo;\n            }\n            ctx.beginPath();\n            ctx.moveTo(0, j * this.pianoRoll.config.noteHeight);\n            ctx.lineTo(canvas.width, j * this.pianoRoll.config.noteHeight);\n            ctx.stroke();\n            j++;\n        }\n\n        this.frame.append(canvas);\n    }\n}\n\nclass TimeBar {\n    pianoRoll: PianoRoll;\n    frame: HTMLDivElement;\n    height: number = 30;\n\n    constructor(pianoRoll: PianoRoll) {\n        this.pianoRoll = pianoRoll;\n        this.frame = document.createElement(\"div\");\n\n        this.#createFrame();\n        this.#draw();\n    }\n\n    #createFrame() {\n        this.frame.id = \"time-bar-frame\";\n        this.frame.style.position = \"absolute\";\n        this.frame.style.left = this.pianoRoll.config.pianoBarWidth + \"px\";\n        this.frame.style.width = this.pianoRoll.config.frameWidth + \"px\";\n        this.frame.style.height = this.height + \"px\";\n        this.frame.style.overflowX = \"scroll\";\n        this.frame.style.overflowY = \"hidden\";\n        this.frame.style.scrollbarWidth = \"none\";\n        this.frame.style.backgroundColor = \"dark gray\";\n        this.pianoRoll.frame.append(this.frame);\n    }\n\n    #draw() {\n        var canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n        canvas.id = \"time-bar\";\n        canvas.width = this.pianoRoll.canvasWidth;\n        canvas.height = this.height;\n        var canvasFrame: HTMLDivElement = document.createElement(\"div\");\n        canvasFrame.style.width = canvas.width + \"px\";\n        canvasFrame.style.height = canvas.height + \"px\";\n        canvasFrame.style.overflow = \"hidden\";\n        canvasFrame.style.position = \"absolute\";\n        const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\")!;\n\n        ctx.strokeStyle = \"rgb(50,50,50)\";\n        for (let i=0; i<this.pianoRoll.barDrawCount; i++) {\n            ctx.beginPath();\n            ctx.moveTo(i*4*this.pianoRoll.config.beatWidth, this.height / 3);\n            ctx.lineTo(i*4*this.pianoRoll.config.beatWidth, this.height);\n            ctx.stroke();\n\n            let timeLabel = document.createElement(\"div\");\n            timeLabel.style.color = \"gray\";\n            timeLabel.style.fontFamily = \"Verdana\";\n            timeLabel.style.fontSize = \"12px\";\n            timeLabel.style.position = \"absolute\";\n            \n            if (i === this.pianoRoll.barDrawCount - 1 && this.pianoRoll.beatDrawCount % 4 != 0) {\n                let width = this.pianoRoll.beatDrawCount % 4;\n                timeLabel.style.width = this.pianoRoll.config.beatWidth * width + \"px\";\n            } else {\n                timeLabel.style.width = this.pianoRoll.config.beatWidth * 16 + \"px\";\n                console.log(timeLabel.style.width)\n            }\n            timeLabel.style.height = this.height + \"px\";\n            timeLabel.style.left = i*this.pianoRoll.config.beatWidth * 4 + \"px\";\n            timeLabel.style.textAlign = \"left\";\n            timeLabel.style.paddingLeft = \"5px\";\n            timeLabel.style.paddingTop = \"10px\";\n            timeLabel.innerHTML = i.toString();\n            canvasFrame.append(timeLabel);\n        }\n        canvasFrame.append(canvas);\n        this.frame.append(canvasFrame);\n    }\n}\n\nclass Transport {\n    pianoRoll: PianoRoll;\n    ctx: CanvasRenderingContext2D;\n    button: HTMLButtonElement;\n    bgColor: string = \"rgb(20,20,20)\";\n\n    constructor(pianoRoll: PianoRoll) {\n        this.pianoRoll = pianoRoll;\n        var canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n        this.button = document.createElement(\"button\");\n        this.ctx = canvas.getContext(\"2d\")!;\n\n        this.button.id = \"transport-btn\";\n        this.button.style.position = \"absolute\";\n        this.button.style.top = \"0px\";\n        this.button.style.left = \"0px\";\n        this.button.style.width = this.pianoRoll.config.pianoBarWidth + \"px\";\n        this.button.style.height = this.pianoRoll.config.timeBarHeight + \"px\";\n        this.button.style.border = \"none\";\n        this.button.style.backgroundColor = \"black\";\n        this.button.style.zIndex = \"9\";\n\n        canvas.style.position = \"absolute\";\n        canvas.style.top = \"0px\";\n        canvas.style.left = \"0px\";\n        canvas.width = this.pianoRoll.config.pianoBarWidth;\n        canvas.height = this.pianoRoll.config.timeBarHeight;\n\n        this.drawPlay();        \n\n        this.button.append(canvas);\n        this.pianoRoll.frame.append(this.button);\n    }\n\n    drawPlay() {\n        this.ctx.fillStyle = this.bgColor;\n        this.ctx.fillRect(0, 0, this.pianoRoll.config.pianoBarWidth, this.pianoRoll.config.timeBarHeight);\n        this.ctx.beginPath();\n        this.ctx.moveTo(8,7);\n        this.ctx.lineTo(8,23);\n        this.ctx.lineTo(22,15);\n        this.ctx.closePath();\n        this.ctx.fillStyle = \"white\";\n        this.ctx.strokeStyle = \"white\";\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n\n    drawStop() {\n        this.ctx.fillStyle = this.bgColor;\n        this.ctx.fillRect(0, 0, this.pianoRoll.config.pianoBarWidth, this.pianoRoll.config.timeBarHeight);\n        this.ctx.beginPath();\n        this.ctx.moveTo(8,7);\n        this.ctx.lineTo(8,23);\n        this.ctx.lineTo(22,23);\n        this.ctx.lineTo(22,7);\n        this.ctx.closePath();\n        this.ctx.fillStyle = \"white\";\n        this.ctx.strokeStyle = \"white\";\n        this.ctx.fill();\n        this.ctx.stroke();\n    }\n}\n\nclass Config {\n    frameWidth: number = 800;\n    frameHeight: number = 600;\n    bpm: number = 120;\n    beatWidth: number = 28;\n    noteHeight: number = 18;\n    pianoBarWidth: number = 30;\n    timeBarHeight: number = 30;\n}\n\nclass PianoRoll {\n    frame: HTMLDivElement;\n    noteSet: Note[];\n    config: Config;\n    synthEngine: SynthEngine;\n    noteGrid: NoteGrid;\n    pianoBar: PianoBar;\n    timeBar: TimeBar;\n    transport: Transport;\n    playHead: PlayHead;\n    playing: boolean = false;\n    scrollSync: boolean = false;\n\n    constructor(noteSet: Note[] = []) {\n        this.noteSet = noteSet;\n\n        // Remove notes that can't be displayed\n        let newNoteSet: Note[] = [];\n        for (let i=0; i<this.noteSet.length; i++) {\n            if (this.noteSet[i].pitch <= this.maxDrawPitch) {\n                if (this.noteSet[i].pitch >= this.minDrawPitch) {\n                    newNoteSet.push(this.noteSet[i]);\n                }\n            }\n        }\n        this.noteSet = newNoteSet;\n\n        // Create config\n        this.config = new Config();\n\n        // Create synth engine\n        this.synthEngine = new SynthEngine();\n\n        // Create entire frame\n        this.frame = document.createElement(\"div\");\n        this.#createFrame();\n\n        // Create transport controls\n        this.transport = new Transport(this);  \n        // Create Time Bar\n        this.timeBar = new TimeBar(this);\n        // Create piano bar\n        this.pianoBar = new PianoBar(this);\n        // Create note grid\n        this.noteGrid = new NoteGrid(this);\n        // Create play head\n        this.playHead = new PlayHead(this);\n\n        // Scroll sync\n        this.#syncScrolling();\n        this.#scrollToFirstNote();\n\n        this.#setupListeners();\n    }\n\n    #setupListeners() {\n        // Listener for transport button click\n        this.transport.button.addEventListener(\"click\", this.toggle.bind(this));\n        // Listener for space bar press\n        document.body.addEventListener(\"keydown\", (event) => {\n            if (event.key === \" \") {\n                this.toggle();\n            }\n        });\n    }\n\n    #createFrame() {\n        // Create frame for entire piano roll\n        this.frame.id = \"piano-roll\"\n        this.frame.style.position = \"absolute\";\n        $(\"body\").append(this.frame);\n    }\n\n    #syncScrolling() {\n        // Scroll sync. Add event listeners to notesFrame and pianoBarFrame, \n        // such that when one is scrolled, the other scrolls too.\n        // Ideally, when one frame is scrolled, we'd remove the event listener from the other frame, \n        // perform the scroll, set scrollTop, then add the other event listener again.\n        //\n        this.scrollSync = false; // the scrollSync flag is something whose state needs to be stored in the object, \n        // allowing the firing of a frame's scroll event to disable the other frame's scroll event.\n        this.noteGrid.frame.addEventListener(\"scroll\", (event) => {\n            if (this.scrollSync) {\n                this.scrollSync = false;\n                return;\n            }\n            this.scrollSync = true;\n            this.pianoBar.frame.scrollTop = this.noteGrid.frame.scrollTop;\n            this.timeBar.frame.scrollLeft = this.noteGrid.frame.scrollLeft;\n        });\n        this.pianoBar.frame.addEventListener(\"scroll\", (event) => {\n            if (this.scrollSync) {\n                this.scrollSync = false;\n                return;\n            }\n            this.scrollSync = true;\n            this.noteGrid.frame.scrollTop = this.pianoBar.frame.scrollTop;\n        });\n        this.timeBar.frame.addEventListener(\"scroll\", (event) => {\n            if (this.scrollSync) {\n                this.scrollSync = false;\n                return;\n            }\n            this.scrollSync = true;\n            this.noteGrid.frame.scrollLeft = this.timeBar.frame.scrollLeft;\n        });\n    }\n\n    #scrollToFirstNote() {\n        let noteYPos = (this.maxDrawPitch - this.noteSet[0].pitch) * this.config.noteHeight;\n        let halfPageY = parseInt(this.noteGrid.frame.style.height) / 2;\n        noteYPos = noteYPos - halfPageY;\n        this.noteGrid.frame.scrollTop = noteYPos;\n    }\n\n    play() {\n        this.playing = true;\n        this.transport.drawStop();\n        this.playHead.play();\n    }\n\n    stop() {\n        this.playing = false;\n        this.transport.drawPlay();\n        this.playHead.stop();\n    }\n\n    toggle() {\n        if (!this.playing) {\n            this.play();\n        } else {\n            this.stop();\n        }\n    }\n\n    get canvasHeight() {\n        return this.config.noteHeight * (this.maxDrawPitch - this.minDrawPitch + 1);\n    }\n\n    get canvasWidth() {\n        if (this.beatsFitInFrame) {\n            return this.config.frameWidth;\n        } else {\n            return this.config.beatWidth * this.beatDrawCount;\n        }\n    }\n\n    get times() {\n        let times: number[] = [];\n        this.noteSet.forEach(function(note: Note) {\n            times.push(note.time);\n        });\n        return times;\n    }\n\n    get minDrawPitch() {\n        return 21;\n    }\n\n    get maxDrawPitch() {\n        return 108;\n    }\n\n    get beatsFitInFrame() {\n        let widthInBeats = Math.ceil(this.config.frameWidth / this.config.beatWidth);\n        if ((max(this.times) - min(this.times)) < widthInBeats) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    get beatDrawCount() {\n        if (this.beatsFitInFrame) {\n            return Math.ceil(this.config.frameWidth / this.config.beatWidth);\n        } else {\n            return this.noteSet.slice(-1)[0].time + this.noteSet.slice(-1)[0].dur;\n        }\n    }\n\n    get barDrawCount() {\n        return Math.ceil(this.beatDrawCount / 4);\n    }\n}\n\nclass PlayHead {\n    pianoRoll: PianoRoll;\n    startTime: number = 0;\n    headPos: number = 0;\n    playTime: number = 0;\n    noteCtx: CanvasRenderingContext2D;\n    // timeCtx: CanvasRenderingContext2D; // render on time bar too\n\n    constructor(pianoRoll: PianoRoll) {\n        this.pianoRoll = pianoRoll;\n\n        var noteCanvas: HTMLCanvasElement = document.createElement(\"canvas\");\n        noteCanvas.id = \"playhead\"\n        noteCanvas.style.position = \"absolute\";\n        this.noteCtx = noteCanvas.getContext(\"2d\")!;\n        noteCanvas.width = this.pianoRoll.canvasWidth;\n        noteCanvas.height = this.pianoRoll.canvasHeight;\n        this.update = this.update.bind(this);\n\n        this.pianoRoll.noteGrid.frame.append(noteCanvas);\n\n        this.drawHead();\n    }\n\n    drawHead() {\n        // Draw on note grid\n        this.noteCtx.clearRect(0,0,this.pianoRoll.canvasWidth, this.pianoRoll.canvasHeight);\n        this.noteCtx.beginPath();\n        this.noteCtx.moveTo(this.headPos, 0);\n        this.noteCtx.lineTo(this.headPos, this.pianoRoll.canvasHeight);\n        this.noteCtx.strokeStyle = \"white\";\n        this.noteCtx.lineWidth = 1;\n        this.noteCtx.stroke();\n\n        // Draw on time bar\n    }\n\n    play() {\n        requestAnimationFrame(this.update);\n    }\n\n    stop() {\n        this.headPos = this.startTime;\n        this.playTime = 0;\n        this.drawHead();\n    }\n\n    update(now: any) {\n        if (!this.pianoRoll.playing) return;\n\n        if (!this.playTime) { this.playTime = now }\n        let elapsed = now - this.playTime;\n        this.headPos = (elapsed/200) * this.pianoRoll.config.beatWidth;\n\n        if (this.headPos >= this.pianoRoll.canvasWidth) {\n            this.stop();\n        }\n        \n        if (this.pianoRoll.playing) {\n            this.drawHead();\n            requestAnimationFrame(this.update);\n        }\n    }\n}\n\n// Some utility functions\nfunction clamp(number: number, min: number, max: number) : number {\n    return Math.max(min, Math.min(number, max));\n}\n\nfunction max(array: number[]) : number {\n    let maximum = array[0];\n\n    for (let i=1; i<array.length; i++) {\n        if (maximum < array[i]) {\n            maximum = array[i];\n        }\n    }\n    \n    return maximum;\n}\n\nfunction min(array: number[]) : number {\n    let minimum = array[0];\n\n    for (let i=1; i<array.length; i++) {\n        if (minimum > array[i]) {\n            minimum = array[i];\n        }\n    }\n    \n    return minimum;\n}\n\nfunction numToPitchName(pitchNum: number) : string {\n    let noteNames: string[] = [\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"]\n    let pc: string = noteNames[pitchNum % 12];\n    let octave: string = (Math.floor(pitchNum/12)-1).toString();\n    return pc + octave\n}\n\n// Test function that creates the notes we use in the PianoRoll\nfunction makeNotes() : Note[] {\n    let pitches = [41];\n    let scale = [2,1,2];\n    let scaleIdx = 0;\n    for (let i=0; i<30; i++) {\n        pitches.push(pitches.slice(-1)[0] + scale[scaleIdx]);\n        scaleIdx = (scaleIdx + 1) % scale.length;\n    }\n    let notes: Note[] = [];\n    for (let i=0; i<pitches.length; i++) {\n        notes.push(new Note(pitches[i], i, 1));\n    }\n    return notes;\n}\n\n// Main program\nvar pianoRoll: PianoRoll;\n$(function() {    \n    let notes = makeNotes();\n    pianoRoll = new PianoRoll(notes);\n});"],
  "mappings": ";;;;AA+BA,MAAM,cAAN,MAAkB;AAAA;AAAA,IAGd,cAAc;AAEV,WAAK,SAAS,EAAE;AAAA,IACpB;AAAA,IAEA,SAAS,OAAe;AAAA,IAExB;AAAA,EACJ;AAEA,MAAM,OAAN,MAAW;AAAA,IAKP,YAAY,OAAe,MAAc,KAAa;AAClD,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AAEA,MAAM,WAAN,MAAe;AAAA,IAKX,YAAYA,YAAsB;AAC9B,WAAK,YAAYA;AACjB,WAAK,QAAQ,SAAS,cAAc,KAAK;AACzC,WAAK,WAAW,SAAS,cAAc,KAAK;AAE5C,WAAK,aAAa;AAClB,WAAK,cAAc;AACnB,WAAK,WAAW;AAAA,IACpB;AAAA,IAEA,eAAe;AACX,WAAK,MAAM,KAAK;AAChB,WAAK,MAAM,MAAM,WAAW;AAC5B,WAAK,MAAM,MAAM,MAAM,KAAK,UAAU,OAAO,gBAAgB;AAC7D,WAAK,MAAM,MAAM,OAAO,KAAK,UAAU,OAAO,gBAAgB;AAC9D,WAAK,MAAM,MAAM,QAAQ,KAAK,UAAU,OAAO,aAAa;AAC5D,WAAK,MAAM,MAAM,SAAS,KAAK,UAAU,OAAO,cAAc;AAC9D,WAAK,MAAM,MAAM,WAAW;AAC5B,WAAK,MAAM,MAAM,iBAAiB;AAClC,WAAK,UAAU,MAAM,OAAO,KAAK,KAAK;AAAA,IAC1C;AAAA,IAEA,gBAAgB;AACZ,UAAI,SAA4B,SAAS,cAAc,QAAQ;AAC/D,aAAO,KAAK;AACZ,aAAO,MAAM,WAAW;AAExB,aAAO,SAAS,KAAK,UAAU;AAC/B,aAAO,QAAQ,KAAK,UAAU;AAE9B,YAAM,MAAgC,OAAO,WAAW,IAAI;AAC5D,UAAI,WAAW;AACf,UAAI,WAAW;AACf,UAAI,aAAa,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,QAAQ;AAGxI,UAAI,cAAc;AAClB,UAAI,YAAY;AAGhB,UAAI,IAAI;AACR,eAAS,IAAE,KAAK,UAAU,cAAc,KAAG,KAAK,UAAU,cAAc,KAAK;AACzE,YAAI,YAAY,WAAW,IAAE,EAAE;AAC/B,YAAI,SAAS,GAAG,KAAK,UAAU,OAAO,aAAa,GAAG,OAAO,OAAO,KAAK,UAAU,OAAO,UAAU;AACpG;AAAA,MACJ;AACA,UAAE;AACF,eAAS,IAAE,KAAK,UAAU,cAAc,KAAG,KAAK,UAAU,cAAc,KAAK;AACzE,YAAI,IAAE,OAAO,IAAI;AACb,cAAI,cAAc;AAAA,QACtB,OAAO;AACH,cAAI,cAAc;AAAA,QACtB;AACA,YAAI,UAAU;AACd,YAAI,OAAO,GAAG,IAAI,KAAK,UAAU,OAAO,UAAU;AAClD,YAAI,OAAO,OAAO,OAAO,IAAI,KAAK,UAAU,OAAO,UAAU;AAC7D,YAAI,OAAO;AACX;AAAA,MACJ;AAGA,eAAS,IAAE,GAAG,IAAE,KAAK,UAAU,eAAe,KAAK;AAC/C,YAAI,IAAE,MAAM,GAAG;AACX,cAAI,cAAc;AAAA,QACtB,OAAO;AACH,cAAI,cAAc;AAAA,QACtB;AACA,YAAI,UAAU;AACd,YAAI,OAAO,IAAE,KAAK,UAAU,OAAO,WAAW,CAAC;AAC/C,YAAI,OAAO,IAAE,KAAK,UAAU,OAAO,WAAW,OAAO,MAAM;AAC3D,YAAI,OAAO;AAAA,MACf;AAEA,WAAK,MAAM,OAAO,MAAM;AAAA,IAC5B;AAAA,IAEA,aAAa;AAET,WAAK,SAAS,KAAK;AACnB,WAAK,SAAS,MAAM,WAAW;AAC/B,WAAK,MAAM,OAAO,KAAK,QAAQ;AAE/B,UAAI,CAAC,KAAK,UAAU,QAAS;AAE7B,eAAS,IAAE,GAAG,IAAE,KAAK,UAAU,QAAQ,QAAQ,KAAK;AAChD,YAAI,OAA0B,SAAS,cAAc,QAAQ;AAC7D,aAAK,MAAM,WAAW;AACtB,aAAK,MAAM,QAAS,KAAK,UAAU,OAAO,YAAY,KAAK,UAAU,QAAQ,CAAC,EAAE,MAAO;AACvF,aAAK,MAAM,SAAS,KAAK,UAAU,OAAO,aAAa;AACvD,aAAK,MAAM,OAAQ,KAAK,UAAU,OAAO,YAAY,KAAK,UAAU,QAAQ,CAAC,EAAE,OAAQ;AACvF,aAAK,MAAM,MAAO,KAAK,UAAU,OAAO,cAAc,KAAK,UAAU,eAAe,KAAK,UAAU,QAAQ,CAAC,EAAE,SAAU;AACxH,aAAK,YAAY,KAAK,UAAU,QAAQ,CAAC,EAAE,MAAM,SAAS;AAC1D,aAAK,MAAM,YAAY;AAEvB,aAAK,MAAM,UAAU;AACrB,aAAK,MAAM,WAAW,MAAM,KAAK,UAAU,OAAO,aAAW,KAAK,GAAG,EAAE,IAAI;AAC3E,aAAK,SAAS,OAAO,IAAI;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAEA,MAAM,WAAN,MAAe;AAAA,IAKX,YAAYA,YAAsB;AAFlC,mBAAgB;AAGZ,WAAK,YAAYA;AACjB,WAAK,QAAQ,SAAS,cAAc,KAAK;AAEzC,WAAK,aAAa;AAClB,WAAK,MAAM;AAAA,IACf;AAAA,IAEA,eAAe;AACX,WAAK,MAAM,KAAK;AAChB,WAAK,MAAM,MAAM,WAAW;AAC5B,WAAK,MAAM,MAAM,MAAM,KAAK,UAAU,OAAO,gBAAgB;AAC7D,WAAK,MAAM,MAAM,QAAQ,KAAK,QAAQ;AACtC,WAAK,MAAM,MAAM,SAAS,KAAK,UAAU,OAAO,cAAc;AAC9D,WAAK,MAAM,MAAM,WAAW;AAC5B,WAAK,MAAM,MAAM,iBAAiB;AAClC,WAAK,UAAU,MAAM,OAAO,KAAK,KAAK;AAAA,IAC1C;AAAA,IAEA,QAAQ;AACJ,UAAI,SAA4B,SAAS,cAAc,QAAQ;AAC/D,aAAO,KAAK;AACZ,aAAO,MAAM,WAAW;AAExB,aAAO,SAAS,KAAK,UAAU;AAC/B,aAAO,QAAQ,KAAK;AAEpB,YAAM,MAAgC,OAAO,WAAW,IAAI;AAC5D,UAAI,WAAW;AACf,UAAI,WAAW;AACf,UAAI,aAAa,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,QAAQ;AAGxI,UAAI,cAAc;AAClB,UAAI,YAAY;AAGhB,UAAI,IAAI;AACR,eAAS,IAAE,KAAK,UAAU,cAAc,KAAG,KAAK,UAAU,cAAc,KAAK;AACzE,YAAI,YAAY,WAAW,IAAE,EAAE;AAC/B,YAAI,SAAS,GAAG,KAAK,UAAU,OAAO,aAAa,GAAG,KAAK,OAAO,KAAK,UAAU,OAAO,UAAU;AAClG;AAAA,MACJ;AACA,UAAE;AACF,eAAS,IAAE,KAAK,UAAU,cAAc,KAAG,KAAK,UAAU,cAAc,KAAK;AACzE,YAAI,IAAE,OAAO,IAAI;AACb,cAAI,cAAc;AAAA,QACtB,OAAO;AACH,cAAI,cAAc;AAAA,QACtB;AACA,YAAI,UAAU;AACd,YAAI,OAAO,GAAG,IAAI,KAAK,UAAU,OAAO,UAAU;AAClD,YAAI,OAAO,OAAO,OAAO,IAAI,KAAK,UAAU,OAAO,UAAU;AAC7D,YAAI,OAAO;AACX;AAAA,MACJ;AAEA,WAAK,MAAM,OAAO,MAAM;AAAA,IAC5B;AAAA,EACJ;AAEA,MAAM,UAAN,MAAc;AAAA,IAKV,YAAYA,YAAsB;AAFlC,oBAAiB;AAGb,WAAK,YAAYA;AACjB,WAAK,QAAQ,SAAS,cAAc,KAAK;AAEzC,WAAK,aAAa;AAClB,WAAK,MAAM;AAAA,IACf;AAAA,IAEA,eAAe;AACX,WAAK,MAAM,KAAK;AAChB,WAAK,MAAM,MAAM,WAAW;AAC5B,WAAK,MAAM,MAAM,OAAO,KAAK,UAAU,OAAO,gBAAgB;AAC9D,WAAK,MAAM,MAAM,QAAQ,KAAK,UAAU,OAAO,aAAa;AAC5D,WAAK,MAAM,MAAM,SAAS,KAAK,SAAS;AACxC,WAAK,MAAM,MAAM,YAAY;AAC7B,WAAK,MAAM,MAAM,YAAY;AAC7B,WAAK,MAAM,MAAM,iBAAiB;AAClC,WAAK,MAAM,MAAM,kBAAkB;AACnC,WAAK,UAAU,MAAM,OAAO,KAAK,KAAK;AAAA,IAC1C;AAAA,IAEA,QAAQ;AACJ,UAAI,SAA4B,SAAS,cAAc,QAAQ;AAC/D,aAAO,KAAK;AACZ,aAAO,QAAQ,KAAK,UAAU;AAC9B,aAAO,SAAS,KAAK;AACrB,UAAI,cAA8B,SAAS,cAAc,KAAK;AAC9D,kBAAY,MAAM,QAAQ,OAAO,QAAQ;AACzC,kBAAY,MAAM,SAAS,OAAO,SAAS;AAC3C,kBAAY,MAAM,WAAW;AAC7B,kBAAY,MAAM,WAAW;AAC7B,YAAM,MAAgC,OAAO,WAAW,IAAI;AAE5D,UAAI,cAAc;AAClB,eAAS,IAAE,GAAG,IAAE,KAAK,UAAU,cAAc,KAAK;AAC9C,YAAI,UAAU;AACd,YAAI,OAAO,IAAE,IAAE,KAAK,UAAU,OAAO,WAAW,KAAK,SAAS,CAAC;AAC/D,YAAI,OAAO,IAAE,IAAE,KAAK,UAAU,OAAO,WAAW,KAAK,MAAM;AAC3D,YAAI,OAAO;AAEX,YAAI,YAAY,SAAS,cAAc,KAAK;AAC5C,kBAAU,MAAM,QAAQ;AACxB,kBAAU,MAAM,aAAa;AAC7B,kBAAU,MAAM,WAAW;AAC3B,kBAAU,MAAM,WAAW;AAE3B,YAAI,MAAM,KAAK,UAAU,eAAe,KAAK,KAAK,UAAU,gBAAgB,KAAK,GAAG;AAChF,cAAI,QAAQ,KAAK,UAAU,gBAAgB;AAC3C,oBAAU,MAAM,QAAQ,KAAK,UAAU,OAAO,YAAY,QAAQ;AAAA,QACtE,OAAO;AACH,oBAAU,MAAM,QAAQ,KAAK,UAAU,OAAO,YAAY,KAAK;AAC/D,kBAAQ,IAAI,UAAU,MAAM,KAAK;AAAA,QACrC;AACA,kBAAU,MAAM,SAAS,KAAK,SAAS;AACvC,kBAAU,MAAM,OAAO,IAAE,KAAK,UAAU,OAAO,YAAY,IAAI;AAC/D,kBAAU,MAAM,YAAY;AAC5B,kBAAU,MAAM,cAAc;AAC9B,kBAAU,MAAM,aAAa;AAC7B,kBAAU,YAAY,EAAE,SAAS;AACjC,oBAAY,OAAO,SAAS;AAAA,MAChC;AACA,kBAAY,OAAO,MAAM;AACzB,WAAK,MAAM,OAAO,WAAW;AAAA,IACjC;AAAA,EACJ;AAEA,MAAM,YAAN,MAAgB;AAAA,IAMZ,YAAYA,YAAsB;AAFlC,qBAAkB;AAGd,WAAK,YAAYA;AACjB,UAAI,SAA4B,SAAS,cAAc,QAAQ;AAC/D,WAAK,SAAS,SAAS,cAAc,QAAQ;AAC7C,WAAK,MAAM,OAAO,WAAW,IAAI;AAEjC,WAAK,OAAO,KAAK;AACjB,WAAK,OAAO,MAAM,WAAW;AAC7B,WAAK,OAAO,MAAM,MAAM;AACxB,WAAK,OAAO,MAAM,OAAO;AACzB,WAAK,OAAO,MAAM,QAAQ,KAAK,UAAU,OAAO,gBAAgB;AAChE,WAAK,OAAO,MAAM,SAAS,KAAK,UAAU,OAAO,gBAAgB;AACjE,WAAK,OAAO,MAAM,SAAS;AAC3B,WAAK,OAAO,MAAM,kBAAkB;AACpC,WAAK,OAAO,MAAM,SAAS;AAE3B,aAAO,MAAM,WAAW;AACxB,aAAO,MAAM,MAAM;AACnB,aAAO,MAAM,OAAO;AACpB,aAAO,QAAQ,KAAK,UAAU,OAAO;AACrC,aAAO,SAAS,KAAK,UAAU,OAAO;AAEtC,WAAK,SAAS;AAEd,WAAK,OAAO,OAAO,MAAM;AACzB,WAAK,UAAU,MAAM,OAAO,KAAK,MAAM;AAAA,IAC3C;AAAA,IAEA,WAAW;AACP,WAAK,IAAI,YAAY,KAAK;AAC1B,WAAK,IAAI,SAAS,GAAG,GAAG,KAAK,UAAU,OAAO,eAAe,KAAK,UAAU,OAAO,aAAa;AAChG,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,OAAO,GAAE,CAAC;AACnB,WAAK,IAAI,OAAO,GAAE,EAAE;AACpB,WAAK,IAAI,OAAO,IAAG,EAAE;AACrB,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,YAAY;AACrB,WAAK,IAAI,cAAc;AACvB,WAAK,IAAI,KAAK;AACd,WAAK,IAAI,OAAO;AAAA,IACpB;AAAA,IAEA,WAAW;AACP,WAAK,IAAI,YAAY,KAAK;AAC1B,WAAK,IAAI,SAAS,GAAG,GAAG,KAAK,UAAU,OAAO,eAAe,KAAK,UAAU,OAAO,aAAa;AAChG,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,OAAO,GAAE,CAAC;AACnB,WAAK,IAAI,OAAO,GAAE,EAAE;AACpB,WAAK,IAAI,OAAO,IAAG,EAAE;AACrB,WAAK,IAAI,OAAO,IAAG,CAAC;AACpB,WAAK,IAAI,UAAU;AACnB,WAAK,IAAI,YAAY;AACrB,WAAK,IAAI,cAAc;AACvB,WAAK,IAAI,KAAK;AACd,WAAK,IAAI,OAAO;AAAA,IACpB;AAAA,EACJ;AAEA,MAAM,SAAN,MAAa;AAAA,IAAb;AACI,wBAAqB;AACrB,yBAAsB;AACtB,iBAAc;AACd,uBAAoB;AACpB,wBAAqB;AACrB,2BAAwB;AACxB,2BAAwB;AAAA;AAAA,EAC5B;AAEA,MAAM,YAAN,MAAgB;AAAA,IAaZ,YAAY,UAAkB,CAAC,GAAG;AAHlC,qBAAmB;AACnB,wBAAsB;AAGlB,WAAK,UAAU;AAGf,UAAI,aAAqB,CAAC;AAC1B,eAAS,IAAE,GAAG,IAAE,KAAK,QAAQ,QAAQ,KAAK;AACtC,YAAI,KAAK,QAAQ,CAAC,EAAE,SAAS,KAAK,cAAc;AAC5C,cAAI,KAAK,QAAQ,CAAC,EAAE,SAAS,KAAK,cAAc;AAC5C,uBAAW,KAAK,KAAK,QAAQ,CAAC,CAAC;AAAA,UACnC;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,UAAU;AAGf,WAAK,SAAS,IAAI,OAAO;AAGzB,WAAK,cAAc,IAAI,YAAY;AAGnC,WAAK,QAAQ,SAAS,cAAc,KAAK;AACzC,WAAK,aAAa;AAGlB,WAAK,YAAY,IAAI,UAAU,IAAI;AAEnC,WAAK,UAAU,IAAI,QAAQ,IAAI;AAE/B,WAAK,WAAW,IAAI,SAAS,IAAI;AAEjC,WAAK,WAAW,IAAI,SAAS,IAAI;AAEjC,WAAK,WAAW,IAAI,SAAS,IAAI;AAGjC,WAAK,eAAe;AACpB,WAAK,mBAAmB;AAExB,WAAK,gBAAgB;AAAA,IACzB;AAAA,IAEA,kBAAkB;AAEd,WAAK,UAAU,OAAO,iBAAiB,SAAS,KAAK,OAAO,KAAK,IAAI,CAAC;AAEtE,eAAS,KAAK,iBAAiB,WAAW,CAAC,UAAU;AACjD,YAAI,MAAM,QAAQ,KAAK;AACnB,eAAK,OAAO;AAAA,QAChB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IAEA,eAAe;AAEX,WAAK,MAAM,KAAK;AAChB,WAAK,MAAM,MAAM,WAAW;AAC5B,QAAE,MAAM,EAAE,OAAO,KAAK,KAAK;AAAA,IAC/B;AAAA,IAEA,iBAAiB;AAMb,WAAK,aAAa;AAElB,WAAK,SAAS,MAAM,iBAAiB,UAAU,CAAC,UAAU;AACtD,YAAI,KAAK,YAAY;AACjB,eAAK,aAAa;AAClB;AAAA,QACJ;AACA,aAAK,aAAa;AAClB,aAAK,SAAS,MAAM,YAAY,KAAK,SAAS,MAAM;AACpD,aAAK,QAAQ,MAAM,aAAa,KAAK,SAAS,MAAM;AAAA,MACxD,CAAC;AACD,WAAK,SAAS,MAAM,iBAAiB,UAAU,CAAC,UAAU;AACtD,YAAI,KAAK,YAAY;AACjB,eAAK,aAAa;AAClB;AAAA,QACJ;AACA,aAAK,aAAa;AAClB,aAAK,SAAS,MAAM,YAAY,KAAK,SAAS,MAAM;AAAA,MACxD,CAAC;AACD,WAAK,QAAQ,MAAM,iBAAiB,UAAU,CAAC,UAAU;AACrD,YAAI,KAAK,YAAY;AACjB,eAAK,aAAa;AAClB;AAAA,QACJ;AACA,aAAK,aAAa;AAClB,aAAK,SAAS,MAAM,aAAa,KAAK,QAAQ,MAAM;AAAA,MACxD,CAAC;AAAA,IACL;AAAA,IAEA,qBAAqB;AACjB,UAAI,YAAY,KAAK,eAAe,KAAK,QAAQ,CAAC,EAAE,SAAS,KAAK,OAAO;AACzE,UAAI,YAAY,SAAS,KAAK,SAAS,MAAM,MAAM,MAAM,IAAI;AAC7D,iBAAW,WAAW;AACtB,WAAK,SAAS,MAAM,YAAY;AAAA,IACpC;AAAA,IAEA,OAAO;AACH,WAAK,UAAU;AACf,WAAK,UAAU,SAAS;AACxB,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,IAEA,OAAO;AACH,WAAK,UAAU;AACf,WAAK,UAAU,SAAS;AACxB,WAAK,SAAS,KAAK;AAAA,IACvB;AAAA,IAEA,SAAS;AACL,UAAI,CAAC,KAAK,SAAS;AACf,aAAK,KAAK;AAAA,MACd,OAAO;AACH,aAAK,KAAK;AAAA,MACd;AAAA,IACJ;AAAA,IAEA,IAAI,eAAe;AACf,aAAO,KAAK,OAAO,cAAc,KAAK,eAAe,KAAK,eAAe;AAAA,IAC7E;AAAA,IAEA,IAAI,cAAc;AACd,UAAI,KAAK,iBAAiB;AACtB,eAAO,KAAK,OAAO;AAAA,MACvB,OAAO;AACH,eAAO,KAAK,OAAO,YAAY,KAAK;AAAA,MACxC;AAAA,IACJ;AAAA,IAEA,IAAI,QAAQ;AACR,UAAI,QAAkB,CAAC;AACvB,WAAK,QAAQ,QAAQ,SAAS,MAAY;AACtC,cAAM,KAAK,KAAK,IAAI;AAAA,MACxB,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IAEA,IAAI,eAAe;AACf,aAAO;AAAA,IACX;AAAA,IAEA,IAAI,eAAe;AACf,aAAO;AAAA,IACX;AAAA,IAEA,IAAI,kBAAkB;AAClB,UAAI,eAAe,KAAK,KAAK,KAAK,OAAO,aAAa,KAAK,OAAO,SAAS;AAC3E,UAAK,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,IAAK,cAAc;AACpD,eAAO;AAAA,MACX,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IAEA,IAAI,gBAAgB;AAChB,UAAI,KAAK,iBAAiB;AACtB,eAAO,KAAK,KAAK,KAAK,OAAO,aAAa,KAAK,OAAO,SAAS;AAAA,MACnE,OAAO;AACH,eAAO,KAAK,QAAQ,MAAM,EAAE,EAAE,CAAC,EAAE,OAAO,KAAK,QAAQ,MAAM,EAAE,EAAE,CAAC,EAAE;AAAA,MACtE;AAAA,IACJ;AAAA,IAEA,IAAI,eAAe;AACf,aAAO,KAAK,KAAK,KAAK,gBAAgB,CAAC;AAAA,IAC3C;AAAA,EACJ;AAEA,MAAM,WAAN,MAAe;AAAA;AAAA,IAQX,YAAYA,YAAsB;AANlC,uBAAoB;AACpB,qBAAkB;AAClB,sBAAmB;AAKf,WAAK,YAAYA;AAEjB,UAAI,aAAgC,SAAS,cAAc,QAAQ;AACnE,iBAAW,KAAK;AAChB,iBAAW,MAAM,WAAW;AAC5B,WAAK,UAAU,WAAW,WAAW,IAAI;AACzC,iBAAW,QAAQ,KAAK,UAAU;AAClC,iBAAW,SAAS,KAAK,UAAU;AACnC,WAAK,SAAS,KAAK,OAAO,KAAK,IAAI;AAEnC,WAAK,UAAU,SAAS,MAAM,OAAO,UAAU;AAE/C,WAAK,SAAS;AAAA,IAClB;AAAA,IAEA,WAAW;AAEP,WAAK,QAAQ,UAAU,GAAE,GAAE,KAAK,UAAU,aAAa,KAAK,UAAU,YAAY;AAClF,WAAK,QAAQ,UAAU;AACvB,WAAK,QAAQ,OAAO,KAAK,SAAS,CAAC;AACnC,WAAK,QAAQ,OAAO,KAAK,SAAS,KAAK,UAAU,YAAY;AAC7D,WAAK,QAAQ,cAAc;AAC3B,WAAK,QAAQ,YAAY;AACzB,WAAK,QAAQ,OAAO;AAAA,IAGxB;AAAA,IAEA,OAAO;AACH,4BAAsB,KAAK,MAAM;AAAA,IACrC;AAAA,IAEA,OAAO;AACH,WAAK,UAAU,KAAK;AACpB,WAAK,WAAW;AAChB,WAAK,SAAS;AAAA,IAClB;AAAA,IAEA,OAAO,KAAU;AACb,UAAI,CAAC,KAAK,UAAU,QAAS;AAE7B,UAAI,CAAC,KAAK,UAAU;AAAE,aAAK,WAAW;AAAA,MAAI;AAC1C,UAAI,UAAU,MAAM,KAAK;AACzB,WAAK,UAAW,UAAQ,MAAO,KAAK,UAAU,OAAO;AAErD,UAAI,KAAK,WAAW,KAAK,UAAU,aAAa;AAC5C,aAAK,KAAK;AAAA,MACd;AAEA,UAAI,KAAK,UAAU,SAAS;AACxB,aAAK,SAAS;AACd,8BAAsB,KAAK,MAAM;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AAGA,WAAS,MAAM,QAAgBC,MAAaC,MAAsB;AAC9D,WAAO,KAAK,IAAID,MAAK,KAAK,IAAI,QAAQC,IAAG,CAAC;AAAA,EAC9C;AAEA,WAAS,IAAI,OAA0B;AACnC,QAAI,UAAU,MAAM,CAAC;AAErB,aAAS,IAAE,GAAG,IAAE,MAAM,QAAQ,KAAK;AAC/B,UAAI,UAAU,MAAM,CAAC,GAAG;AACpB,kBAAU,MAAM,CAAC;AAAA,MACrB;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAEA,WAAS,IAAI,OAA0B;AACnC,QAAI,UAAU,MAAM,CAAC;AAErB,aAAS,IAAE,GAAG,IAAE,MAAM,QAAQ,KAAK;AAC/B,UAAI,UAAU,MAAM,CAAC,GAAG;AACpB,kBAAU,MAAM,CAAC;AAAA,MACrB;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAUA,WAAS,YAAqB;AAC1B,QAAI,UAAU,CAAC,EAAE;AACjB,QAAI,QAAQ,CAAC,GAAE,GAAE,CAAC;AAClB,QAAI,WAAW;AACf,aAAS,IAAE,GAAG,IAAE,IAAI,KAAK;AACrB,cAAQ,KAAK,QAAQ,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,QAAQ,CAAC;AACnD,kBAAY,WAAW,KAAK,MAAM;AAAA,IACtC;AACA,QAAI,QAAgB,CAAC;AACrB,aAAS,IAAE,GAAG,IAAE,QAAQ,QAAQ,KAAK;AACjC,YAAM,KAAK,IAAI,KAAK,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAGA,MAAI;AACJ,IAAE,WAAW;AACT,QAAI,QAAQ,UAAU;AACtB,gBAAY,IAAI,UAAU,KAAK;AAAA,EACnC,CAAC;",
  "names": ["pianoRoll", "min", "max"]
}
